#!/bin/bash
############################
#Nagios Sophos Plugin      #
#TeTesept  		   #
############################

#Nagios Plugin zur Ueberpruefung der RED / WLAN Devices

#Statuscodes:
#Code   Status
#0      OK
#1      WARNING
#2      CRITICAL
#3      UNKNOWN

#Chlog
version="0.9"
chdate="18.10.2018"

#Funktionen
debug()
{
        fett=`tput bold`
        reset=`tput sgr0`
        if [ "$1" == "off" ]
        then
                set +x
                echo "${fett}--------------------DEBUG=OFF-------------------${reset}"
        elif [ "$1" == "on" ] || [ "$1" = "" ]
        then
                echo "${fett}--------------------DEBUG=ON--------------------${reset}"
                set -x
        else
                echo "Error. Wrong Input: ${0} ${1}. Use \"debug on\" or \"debug off\" to enter or leave debug mode"
                exit
        fi
}

#Hilfe anzeigen
helpme()
{
	echo ""
        echo "Usage Shell:"
        echo -e "\t check_sopdev -h \$HOST -c \$COMMUNITY -d \$DEVICENAME -i \$INFODESCRIPTION"
	echo ""
	exit 3
}

#Info
defdone()
{
	echo "Script Version: v${version} - ${chdate}" 
}

#Clean
clean()
{
	find -P "/tmp/${target}/" -maxdepth 2 -type f -mmin +30 -exec rm {} \;
	defdone
}


#Zum einblenden der Konsolenbefehle aktivieren
#debug on

#Init
datefp=`date +%Y%m%d%H%M%S`
reddevice="(wlan|red)"
devfounf="notfount"
status=""
curdir=`echo $0 | sed 's/check_red//'`
ScriptVersion=`ls -lah $curdir | grep check_db | grep -v check_db~ | awk '{print $6,$7,$8}'`
ScriptVersion=`ls -lah --time-style=+%d.%m.%Y_%H:%M:%S $curdir | grep check_db | grep -v check_db~  | sed 's/_/ /g' | awk '{print $6,$7}'`

#Optinhandler
while getopts :h:c:d:i: option
do
	case $option in
	h)
		target=$OPTARG	
	;;
	c)
		community=$OPTARG
	;;
	i)
		info=$OPTARG
	;;
	d)
		reddevice=$OPTARG
	;;	
	\?)
	    	echo "Invalid option: -$OPTARG"
		helpme
	;;
	:)
		echo "Option -$OPTARG requires an argument."
		helpme
	;;
	esac
done

if [ "$target" == "" ]
then
	echo ""
	echo "Error. Target is missing"
	helpme
fi
if [ "$community" == "" ]
then
	echo ""
	echo "Error. Community is missing"
	helpme
fi


#Temp dir
tmpdir="/tmp/${target}/"
if ! [ -d $tmpdir  ]
then
	mkdir $tmpdir
fi
if ! [ -r $tmpdir  ] && [ -w $tmpdir  ]
then
	mkdir $tmpdir
fi

#Trap zum aufräumen
trap 'clean' SIGINT SIGHUP SIGILL SIGSYS SIGTERM SIGSTOP 0 1 2 3

#Daten sammeln und array füllen
IFS=$'\n'
readarray -t devicearray <<< "$(snmpwalk -v2c -c $community $target -On .1.3.6.1.2.1.2.2.1.2 | egrep $reddevice)"
readarray -t statusarray <<< "$(snmpwalk -v2c -c $community $target -On .1.3.6.1.2.1.2.2.1.17)"
errorarray=()

#Abfrage für alle devices
if [ "$reddevice" == "(wlan|red)" ]
then
	reddrun=`snmpwalk -v2c -c $community $target -On .1.3.6.1.2.1.25.4.2.1.4.4275 | awk '{print $4}' | sed 's/"//g'`
	if [ "$reddrun" == "" ]
	then
		echo "Red daemon is not Running, "
		exit 2
	else
		status="$status Red daemon is Running"
	fi
	for i in "${statusarray[@]}"
	do
		for z in "${devicearray[@]}"
		do
			equali=`echo $i | sed 's/.1.3.6.1.2.1.2.2.1.17.//' | awk '{print $1}'`
			equalz=`echo $z | sed 's/.1.3.6.1.2.1.2.2.1.2.//' | awk '{print $1}'`
			if [ "$equali" = "$equalz" ]
			then
				traffic=`echo $i | sed 's/.1.3.6.1.2.1.2.2.1.2.//' | awk '{print $4}'`
				device=`echo $i $z | awk '{print $8}' | sed 's/"//g'`
				tmpdirdev="/tmp/${target}/${device}/"
				if ! [ -d $tmpdirdev  ]
				then
					mkdir $tmpdirdev
				fi                                                                                                                                                 
				fpinuse=`ls ${tmpdirdev} | grep $traffic`
				touch ${tmpdirdev}${traffic}
				if [[ "$fpinuse" != "" ]]
				then
					status="$status ,$device is DOWN"
					errorarray[${equalz}]=2
				else
					status="$status , $device is UP"
					errorarray[${equalz}]=0
				fi
			fi
		done
	done
else
#Abfrage für ein Device
        for i in "${statusarray[@]}"
        do
		for z in "${devicearray[@]}"
		do
			equali=`echo $i | sed 's/.1.3.6.1.2.1.2.2.1.17.//' | awk '{print $1}'`
		        equalz=`echo $z | sed 's/.1.3.6.1.2.1.2.2.1.2.//' | awk '{print $1}'`

	            	if [ "$equali" = "$equalz" ]
        	    	then
                		traffic=`echo $i | sed 's/.1.3.6.1.2.1.2.2.1.2.//' | awk '{print $4}'`
                		device=`echo $i $z | awk '{print $8}' | sed 's/"//g'`
				if [[ "$device" == "$reddevice" ]]
				then
                			tmpdirdev="/tmp/${target}/${device}/"
                			if ! [ -d $tmpdirdev  ]
                			then
                				mkdir $tmpdirdev
                			fi
                			fpinuse=`ls ${tmpdirdev} | grep $traffic`
                			touch ${tmpdirdev}${traffic}                                                              
                			if [[ "$fpinuse" != "" ]]
                			then
                				devfounf=0
						status="$device $info is DOWN - Tunnel is DOWN and not Connected to $target - FootPrint is $traffic - Matrix size is ${#statusarray[*]}x${#devicearray[*]}"
                				errorarray[${equalz}]=2
                			else
                				devfounf=0
						status="$device $info is UP - Tunnel is UP and Connected to $target - FootPrint is $traffic - Matrix size is ${#statusarray[*]}x${#devicearray[*]}"
                				errorarray[${equalz}]=0   
					fi
				fi
			fi
		done
	done
fi

#Aufräumen
#clean

#Device nicht gefunden
if [ "$devfounf" != "0" ]
then
	if [  "$reddevice" != "notset" ]
	then
		echo "Error. $reddevice not found"
		exit 3
	fi
fi

#Errors sammeln
error=`echo ${errorarray[*]} | grep 2`
ok=`echo ${errorarray[*]} | grep 0`

#Statusausgabe
echo $status | sed '1,1s/ , //'

#Unknown
if [ "$error" == ""  ] && [ "$ok" == ""  ]
then 
	exit 3
fi

#Critikal
if [ "$error" != ""  ]
then
	exit 2
fi

#OK
if [ "$ok" != ""  ]
then
        exit 0
fi
